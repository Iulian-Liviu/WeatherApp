// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WeatherApp.Models;
//
//    var forecastModel = ForecastModel.FromJson(jsonString);

namespace WeatherApp.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ForecastModel
    {
        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Latitude { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public double? Longitude { get; set; }

        [JsonProperty("generationtime_ms", NullValueHandling = NullValueHandling.Ignore)]
        public double? GenerationtimeMs { get; set; }

        [JsonProperty("utc_offset_seconds", NullValueHandling = NullValueHandling.Ignore)]
        public long? UtcOffsetSeconds { get; set; }

        [JsonProperty("timezone", NullValueHandling = NullValueHandling.Ignore)]
        public string Timezone { get; set; }

        [JsonProperty("timezone_abbreviation", NullValueHandling = NullValueHandling.Ignore)]
        public string TimezoneAbbreviation { get; set; }

        [JsonProperty("elevation", NullValueHandling = NullValueHandling.Ignore)]
        public long? Elevation { get; set; }

        [JsonProperty("current_weather", NullValueHandling = NullValueHandling.Ignore)]
        public CurrentWeather CurrentWeather { get; set; }

        [JsonProperty("daily_units", NullValueHandling = NullValueHandling.Ignore)]
        public DailyUnits DailyUnits { get; set; }

        [JsonProperty("daily", NullValueHandling = NullValueHandling.Ignore)]
        public Daily Daily { get; set; }
    }

    public partial class CurrentWeather
    {
        [JsonProperty("temperature", NullValueHandling = NullValueHandling.Ignore)]
        public double? Temperature { get; set; }

        [JsonProperty("windspeed", NullValueHandling = NullValueHandling.Ignore)]
        public double? Windspeed { get; set; }

        [JsonProperty("winddirection", NullValueHandling = NullValueHandling.Ignore)]
        public long? Winddirection { get; set; }

        [JsonProperty("weathercode", NullValueHandling = NullValueHandling.Ignore)]
        public long? Weathercode { get; set; }

        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public string Time { get; set; }
    }

    public partial class Daily
    {
        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public List<DateTimeOffset> Time { get; set; }

        [JsonProperty("temperature_2m_max", NullValueHandling = NullValueHandling.Ignore)]
        public List<double> Temperature2MMax { get; set; }

        [JsonProperty("temperature_2m_min", NullValueHandling = NullValueHandling.Ignore)]
        public List<double> Temperature2MMin { get; set; }

        [JsonProperty("precipitation_sum", NullValueHandling = NullValueHandling.Ignore)]
        public List<double> PrecipitationSum { get; set; }

        [JsonProperty("rain_sum", NullValueHandling = NullValueHandling.Ignore)]
        public List<double?> RainSum { get; set; }
    }

    public partial class DailyUnits
    {
        [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
        public string Time { get; set; }

        [JsonProperty("temperature_2m_max", NullValueHandling = NullValueHandling.Ignore)]
        public string Temperature2MMax { get; set; }

        [JsonProperty("temperature_2m_min", NullValueHandling = NullValueHandling.Ignore)]
        public string Temperature2MMin { get; set; }

        [JsonProperty("precipitation_sum", NullValueHandling = NullValueHandling.Ignore)]
        public string PrecipitationSum { get; set; }

        [JsonProperty("rain_sum", NullValueHandling = NullValueHandling.Ignore)]
        public string RainSum { get; set; }
    }

    public partial class ForecastModel
    {
        public static ForecastModel FromJson(string json) => JsonConvert.DeserializeObject<ForecastModel>(json, WeatherApp.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ForecastModel self) => JsonConvert.SerializeObject(self, WeatherApp.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
